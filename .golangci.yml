run:
  timeout: 3m
linters-settings:
  depguard:
    rules:
      main:
        files:
          - $all
        allow:
          - github.com/cccteam/access
          - github.com/cccteam/logger
          - github.com/go-chi/chi/v5
          - github.com/go-playground/errors/v5
          - github.com/gofrs/uuid
          - github.com/google/go-cmp/cmp
          - go.uber.org/mock/gomock
          - $gostd
  dupl:
    threshold: 100
  funlen:
    lines: 100
    statements: 50
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 50
  goconst:
    min-len: 2
    min-occurrences: 3
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
  gocyclo:
    min-complexity: 25
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - TODO
      - BUG
  cyclop:
    # the maximal code complexity to report
    max-complexity: 25
  lll:
    line-length: 200
  maligned:
    suggest-new: true
  misspell:
    locale: US
  nestif:
    # minimal complexity of if statements to report, 5 by default
    min-complexity: 10
  exhaustive:
    default-signifies-exhaustive: true
  tagliatelle:
    # check the struck tag name case
    case:
      # use the struct field name to check the name of the struct tag
      use-field-name: true
      rules:
        # any struct tag type can be used.
        # support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: camel
  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore.
    # If this set, it will override the default set of ignored signatures.
    # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .Cause(
      - .RetryableError(

linters:
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers [fast: true, auto-fix: false]
    - bodyclose # checks whether HTTP response body is closed successfully [fast: false, auto-fix: false]
    - cyclop # checks function and package cyclomatic complexity [fast: false, auto-fix: false]
    - depguard # Go linter that checks if package imports are in a list of acceptable packages [fast: false, auto-fix: false]
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()) [fast: true, auto-fix: false]
    - durationcheck # check for two durations multiplied together [fast: false, auto-fix: false]
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases [fast: false, auto-fix: false]
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13. [fast: false, auto-fix: false]
    - exhaustive # check exhaustiveness of enum switch statements [fast: false, auto-fix: false]
    - exportloopref # checks for pointers to enclosing loop variables [fast: false, auto-fix: false]
    - forcetypeassert # finds forced type assertions [fast: true, auto-fix: false]
    - funlen # Tool for detection of long functions [fast: true, auto-fix: false]
    - gochecknoglobals # check that no global variables exist [fast: true, auto-fix: false]
    - gochecknoinits # Checks that no init functions are present in Go code [fast: true, auto-fix: false]
    - gocognit # Computes and checks the cognitive complexity of functions [fast: true, auto-fix: false]
    - goconst # Finds repeated strings that could be replaced by a constant [fast: true, auto-fix: false]
    - gocritic # Provides many diagnostics that check for bugs, performance and style issues. [fast: false, auto-fix: false]
    - gocyclo # Computes and checks the cyclomatic complexity of functions [fast: true, auto-fix: false]
    - godox # Tool for detection of FIXME, TODO and other comment keywords [fast: true, auto-fix: false]
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification [fast: true, auto-fix: true]
    - gofumpt # Gofumpt checks whether code was gofumpt-ed. [fast: true, auto-fix: true]
    - goimports # Goimports does everything that gofmt does. Additionally it checks unused imports [fast: true, auto-fix: true]
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod. [fast: true, auto-fix: false]
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end [fast: true, auto-fix: false]
    - gosec # (gas): Inspects source code for security problems [fast: false, auto-fix: false]
    - gosimple # (megacheck): Linter for Go source code that specializes in simplifying a code [fast: false, auto-fix: false]
    - govet # (vet, vetshadow): Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string [fast: false, auto-fix: false]
    - importas # Enforces consistent import aliases [fast: false, auto-fix: false]
    - ineffassign # Detects when assignments to existing variables are not used [fast: true, auto-fix: false]
    - lll # Reports long lines [fast: true, auto-fix: false]
    - makezero # Finds slice declarations with non-zero initial length [fast: false, auto-fix: false]
    - misspell # Finds commonly misspelled English words in comments [fast: true, auto-fix: true]
    - nakedret # Finds naked returns in functions greater than a specified function length [fast: true, auto-fix: false]
    - nestif # Reports deeply nested if statements [fast: true, auto-fix: false]
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil. [fast: false, auto-fix: false]
    - nlreturn # nlreturn checks for a new line before return and branch statements to increase code clarity [fast: true, auto-fix: false]
    - noctx # noctx finds sending http request without context.Context [fast: false, auto-fix: false]
    - nolintlint # Reports ill-formed or insufficient nolint directives [fast: true, auto-fix: false]
    - paralleltest # paralleltest detects missing usage of t.Parallel() method in your Go test [fast: true, auto-fix: false]
    - prealloc # Finds slice declarations that could potentially be preallocated [fast: true, auto-fix: false]
    - predeclared # find code that shadows one of Go's predeclared identifiers [fast: true, auto-fix: false]
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint. [fast: false, auto-fix: false]
    - rowserrcheck # checks whether Err of rows is checked successfully [fast: false, auto-fix: false]
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed. [fast: false, auto-fix: false]
    - staticcheck # (megacheck): Staticcheck is a go vet on steroids, applying a ton of static analysis checks [fast: false, auto-fix: false]
    - stylecheck # Stylecheck is a replacement for golint [fast: false, auto-fix: false]
    - tagliatelle # Checks the struct tags. [fast: true, auto-fix: false]
    - tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes [fast: false, auto-fix: false]
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code [fast: false, auto-fix: false]
    - unconvert # Remove unnecessary type conversions [fast: false, auto-fix: false]
    - unparam # Reports unused function parameters [fast: false, auto-fix: false]
    - unused # (megacheck): Checks Go code for unused constants, variables, functions and types [fast: false, auto-fix: false]
    - wastedassign # wastedassign finds wasted assignment statements. [fast: false, auto-fix: false]
    - whitespace # Tool for detection of leading and trailing whitespace [fast: true, auto-fix: true]
    - wrapcheck # Checks that errors returned from external packages are wrapped [fast: false, auto-fix: false]
    # - dupl # Tool for code clone detection [fast: true, auto-fix: false]
    # - exhaustivestruct # Checks if all struct's fields are initialized [fast: false, auto-fix: false]
    # - forbidigo # Forbids identifiers [fast: true, auto-fix: false]
    # - gci # Gci control golang package import order and make it always deterministic. [fast: true, auto-fix: true]
    # - godot # Check if comments end in a period [fast: true, auto-fix: true]
    # - goerr113 # Golang linter to check the errors handling expressions [fast: false, auto-fix: false]
    # - goheader # Checks is file header matches to pattern [fast: true, auto-fix: false]
    # - golint # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes [fast: false, auto-fix: false]
    # - gomnd # An analyzer to detect magic numbers. [fast: true, auto-fix: false]
    # - gomodguard # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations. [fast: true, auto-fix: false]
    # - interfacer # Linter that suggests narrower interface types [fast: false, auto-fix: false]
    # - maligned # Tool to detect Go structs that would take less memory if their fields were sorted [fast: false, auto-fix: false]
    # - promlinter # Check Prometheus metrics naming via promlint [fast: true, auto-fix: false]
    # - scopelint # Scopelint checks for unpinned variables in go programs [fast: true, auto-fix: false]
    # - testpackage # linter that makes you use a separate _test package [fast: true, auto-fix: false]
    # - thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers [fast: false, auto-fix: false]
    # - wsl # Whitespace Linter - Forces you to use empty lines! [fast: true, auto-fix: false]

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd
        - scopelint
        - funlen
        - gocyclo
        - goconst
        - nlreturn
        - gochecknoglobals
        - gochecknoinits
        - lll
        - bodyclose

    - path: errors\.go
      linters:
        - errorlint
        - gochecknoinits

  include:
    - EXC0002
    - EXC0005
    - EXC0015

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

# golangci.com configuration
# https://github.com/golangci/golangci/wiki/Configuration
service:
  golangci-lint-version: 1.52 # use the fixed version to not introduce new linters unexpectedly
